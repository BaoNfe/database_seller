{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\database_seller\\\\client\\\\src\\\\context\\\\cart.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// CartContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCartContext = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCartContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst CartProvider = ({\n  children\n}) => {\n  const addToCart = product => {\n    const existingItem = cart.find(item => item.id === product.id);\n    if (existingItem) {\n      const updatedCart = cart.map(item => item.id === product.id ? {\n        ...item,\n        amount: item.amount + 1\n      } : item);\n      setCart(updatedCart);\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\n      toast.success(\"Item amount updated in cart\");\n    } else {\n      const newItem = {\n        ...product,\n        amount: 1\n      };\n      setCart([...cart, newItem]);\n      localStorage.setItem(\"cart\", JSON.stringify([...cart, newItem]));\n      toast.success(\"Item added to cart\");\n    }\n    setCartDataForServer([...cart, {\n      id: product.id,\n      amount: product.amount || 1\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addToCart,\n      setCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c = CartProvider;\nuseEffect(() => {\n  let existingCartItem = localStorage.getItem(\"cart\");\n  if (existingCartItem) setCart(JSON.parse(existingCartItem));\n}, []);\nconst useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { useCart, CartProvider };\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","jsxDEV","_jsxDEV","CartContext","useCartContext","_s","CartProvider","children","addToCart","product","existingItem","cart","find","item","id","updatedCart","map","amount","setCart","localStorage","setItem","JSON","stringify","success","newItem","setCartDataForServer","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","existingCartItem","getItem","parse","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/database_seller/client/src/context/cart.js"],"sourcesContent":["// CartContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport toast from \"react-hot-toast\";\r\n\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCartContext = () => {\r\n  return useContext(CartContext);\r\n};\r\n\r\n const CartProvider = ({ children }) => {\r\n  \r\n\r\n\r\n  const addToCart = (product) => {\r\n    const existingItem = cart.find((item) => item.id === product.id);\r\n\r\n    if (existingItem) {\r\n      const updatedCart = cart.map((item) =>\r\n        item.id === product.id\r\n          ? { ...item, amount: item.amount + 1 }\r\n          : item\r\n      );\r\n      setCart(updatedCart);\r\n      localStorage.setItem(\"cart\", JSON.stringify(updatedCart));\r\n      toast.success(\"Item amount updated in cart\");\r\n    } else {\r\n      const newItem = { ...product, amount: 1 };\r\n      setCart([...cart, newItem]);\r\n      localStorage.setItem(\"cart\", JSON.stringify([...cart, newItem]));\r\n      toast.success(\"Item added to cart\");\r\n    }\r\n\r\n    setCartDataForServer([...cart, { id: product.id, amount: product.amount || 1 }]);\r\n  };\r\n\r\n \r\n  return (\r\n    <CartContext.Provider value={{ cart, addToCart, setCart }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\nuseEffect(() => {\r\n  let existingCartItem = localStorage.getItem(\"cart\");\r\n  if (existingCartItem) setCart(JSON.parse(existingCartItem));\r\n}, []);\r\nconst useCart = () => useContext(CartContext);\r\nexport { useCart, CartProvider };\r\n\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,OAAOR,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAACE,EAAA,CAFWD,cAAc;AAI1B,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAItC,MAAMC,SAAS,GAAIC,OAAO,IAAK;IAC7B,MAAMC,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;IAEhE,IAAIJ,YAAY,EAAE;MAChB,MAAMK,WAAW,GAAGJ,IAAI,CAACK,GAAG,CAAEH,IAAI,IAChCA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,GAClB;QAAE,GAAGD,IAAI;QAAEI,MAAM,EAAEJ,IAAI,CAACI,MAAM,GAAG;MAAE,CAAC,GACpCJ,IACN,CAAC;MACDK,OAAO,CAACH,WAAW,CAAC;MACpBI,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC,CAAC;MACzDf,KAAK,CAACuB,OAAO,CAAC,6BAA6B,CAAC;IAC9C,CAAC,MAAM;MACL,MAAMC,OAAO,GAAG;QAAE,GAAGf,OAAO;QAAEQ,MAAM,EAAE;MAAE,CAAC;MACzCC,OAAO,CAAC,CAAC,GAAGP,IAAI,EAAEa,OAAO,CAAC,CAAC;MAC3BL,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,GAAGX,IAAI,EAAEa,OAAO,CAAC,CAAC,CAAC;MAChExB,KAAK,CAACuB,OAAO,CAAC,oBAAoB,CAAC;IACrC;IAEAE,oBAAoB,CAAC,CAAC,GAAGd,IAAI,EAAE;MAAEG,EAAE,EAAEL,OAAO,CAACK,EAAE;MAAEG,MAAM,EAAER,OAAO,CAACQ,MAAM,IAAI;IAAE,CAAC,CAAC,CAAC;EAClF,CAAC;EAGD,oBACEf,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEhB,IAAI;MAAEH,SAAS;MAAEU;IAAQ,CAAE;IAAAX,QAAA,EACvDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACC,EAAA,GAhCK1B,YAAY;AAiCnBP,SAAS,CAAC,MAAM;EACd,IAAIkC,gBAAgB,GAAGd,YAAY,CAACe,OAAO,CAAC,MAAM,CAAC;EACnD,IAAID,gBAAgB,EAAEf,OAAO,CAACG,IAAI,CAACc,KAAK,CAACF,gBAAgB,CAAC,CAAC;AAC7D,CAAC,EAAE,EAAE,CAAC;AACN,MAAMG,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMxC,UAAU,CAACM,WAAW,CAAC;AAAA;AAACkC,GAAA,CAAxCD,OAAO;AACb,SAASA,OAAO,EAAE9B,YAAY;AAAG,IAAA0B,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}